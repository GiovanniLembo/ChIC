% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LM_functions.R
\name{qualityScores_LMgenebody}
\alias{qualityScores_LMgenebody}
\title{Wrapper function to plot the scaled metagene- profile  
and to collect the QC-metrics}
\usage{
qualityScores_LMgenebody(data, savePlotPath = NULL, debug = FALSE)
}
\arguments{
\item{data}{metagene-list for input and chip sample 
of the genebody profile returned by createMetageneProfile()}

\item{savePlotPath}{if set the plot will be saved under 
"savePlotPath". Default=NULL and plot will be forwarded to stdout.}

\item{debug}{Boolean to enter in debugging mode (default= FALSE)}
}
\value{
returnList
}
\description{
The scaled metagene profile that includes the gene body, 
the signal is captured on a real scale from the TSS and an upstream 
region of 2KB. From the TSS, the gene body is constructed with 0.5KB 
in real scale at the gene start (TSS + 0.5KB) and the gene end 
(TES - 0.5KB), whereas the remaining gene body is 
scaled to a virtual length of 2000. Considering the length 
of these regions, the minimum gene length required is 3KB and 
shorter genes are filtered out. From the profile, we take enrichment 
values at different coordinates: at 
-2KB, at the TSS, inner margin (0.5KB), gene body 
(2KB + 2 * inner margin), 
gene body+1KB. We collect in total 42 QC-metrics from the ChIP and 
normalized profile. 

qualityScores_LMgenebody
}
\examples{
print("Example Code")
## This command is time intensive to run
##To run the example code the user must provide 2 bam files: 
##one for ChIP and one for the input". Here we used ChIP-seq 
##data from ENCODE. Two example files can be downloaded as follows
## get bam file
setwd(tempdir())

\dontrun{
##chip data
system("wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BLL.bam")
chipName="ENCFF000BLL"
chip.data=readBamFile(chipName)

##input data
system("wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BKA.bam")
inputName="ENCFF000BKA"
input.data=readBamFile(inputName)

## calculate binding characteristics 
chip_binding.characteristics<-spp::get.binding.characteristics(chip.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

## calculate binding characteristics 
input_binding.characteristics<-spp::get.binding.characteristics(input.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

##get chromosome information and order chip and input by it
chrl_final=intersect(names(chip.data$tags),names(input.data$tags))
chip.data$tags=chip.datatags[chrl_final]
chip.data$quality=chip.data$quality[chrl_final]
input.data$tags=input.data$tags[chrl_final]
input.data$quality=input.data$quality[chrl_final]

##remove sigular positions with extremely high tag counts with 
##respect to the neighbourhood
selectedTags=removeLocalTagAnomalies(chip.data, input.data, 
chip_binding.characteristics, input_binding.characteristics)
input.dataSelected=selectedTags$input.dataSelected
chip.dataSelected=selectedTags$chip.dataSelected

##get smoothed tagdensity 
smoothedChip=tagDensity(chip.dataSelected, 
tag.shift=82)
smoothedInput=tagDensity(input.dataSelected, 
tag.shift=82)

Meta_Result=createMetageneProfile(smoothed.densityChip=smoothedChip, 
smoothedInput,tag.shift=82)

geneBodyScores=qualityScores_LMgenebody(Meta_Result$geneBody,
savePlotPath=getwd())
}
}
