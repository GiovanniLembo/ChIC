% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GlobalFunctions.R
\name{qualityScores_GM}
\alias{qualityScores_GM}
\title{Metrics taken from global read distribution}
\usage{
qualityScores_GM(densityChip, densityInput, savePlotPath = NULL,
  debug = FALSE)
}
\arguments{
\item{densityChip}{Smoothed tag-density object for ChIP (returned 
by qualityScores_EM).}

\item{densityInput}{Smoothed tag density object for Input (returned 
by qualityScores_EM)}

\item{savePlotPath}{if set the plot will be saved under 
"savePlotPath". Default=NULL and plot will be forwarded to stdout.}

\item{debug}{Boolean to enter debugging mode (default= FALSE)}
}
\value{
finalList List with 9 QC-values
}
\description{
This set of values is based on the global read distribution along 
the genome for immunoprecipitation and input data (Diaz et al., 2012). 
The genome is binned and the read coverage counted for each bin. Then 
the function computes the cumulative 
distribution of reads density per genomic bin and plots the 
fraction of the coverage on the y-axis and the fraction of bins on 
the x-axis. Then different values can be 
sampled from the cumulative distribution: like the fraction of 
bins without reads for in immunoprecipitation and input,the point of the 
maximum distance between the ChIP and the input 
(x-axis, y-axis for immunoprecipitation and input, 
distance (as absolute difference), the sign of the differences), 
the fraction of reads in the top 1%bin for immunoprecipitation and 
input. Finally, the funciton returns 9 QC-measures

qualityScores_GM
}
\examples{
print("Example of usage")
## This command is time intensive to run
ChIC.data::chipBam
ChIC.data::inputBam
\dontrun{
chip_binding.characteristics<-spp::get.binding.characteristics(chipBam,
srange=c(0,500), bin=5,accept.all.tags=TRUE)
print ("calculate binding characteristics Input")
input_binding.characteristics<-spp::get.binding.characteristics(inputBam,
srange=c(0,500), bin=5,accept.all.tags=TRUE)
##get chromosome information and order chip and input by it
chrl_final=intersect(names(chipBam$tags),names(inputBam$tags))
chip.data$tags=chipBam$tags[chrl_final]
chip.data$quality=chipBam$quality[chrl_final]
input.data$tags=inputBam$tags[chrl_final]
input.data$quality=inputBam$quality[chrl_final]
##remove sigular positions with extremely high tag counts with 
##respect to the neighbourhood
selectedTags=removeLocalTagAnomalies(chipBam, inputBam, 
chip_binding.characteristics, input_binding.characteristics)
input.dataSelected=selectedTags$input.dataSelected
chip.dataSelected=selectedTags$chip.dataSelected
smoothed.densityChip=tagDensity(chip.dataSelected, 
tag.shift=82)
smoothed.densityInput=tagDensity(input.dataSelected, 
tag.shift=82)

Ch_Results=qualityScores_GM(densityChip=smoothedDensityChip,
densityInput=smoothedDensityInput)
}
}
