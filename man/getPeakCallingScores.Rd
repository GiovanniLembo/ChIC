% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GlobalFunctions.R
\name{getPeakCallingScores}
\alias{getPeakCallingScores}
\title{Calculating QC-values from peak calling procedure}
\usage{
getPeakCallingScores(chip, input, chip.dataSelected, input.dataSelected,
  tag.shift = 75, chrorder = NULL)
}
\arguments{
\item{chip}{data-structure with tag information for the 
ChIP (see readBamFile())}

\item{input}{data-structure with tag information for the
Input (see readBamFile())}

\item{chip.dataSelected}{selected ChIP tags after running 
removeLocalTagAnomalies() which removes local tag anomalies}

\item{input.dataSelected}{selected Input tags after running 
removeLocalTagAnomalies() which removes local tag anomalies}

\item{tag.shift}{Integer containing the value of the tag shif, 
calculated by getCrossCorrelationScores()}

\item{chrorder}{chromosome order (default=NULL)}
}
\value{
QCscoreList List with 6 QC-values
}
\description{
QC-metrics based on the peak calling are the fraction of usable 
reads in the peak regions (FRiP) (Landt et al., 2012), for 
which the function calls sharp- and broad-binding peaks to 
obtain two types: the FRiP_sharpsPeak and 
the FRiP_broadPeak. The function takes the number of called 
of peaks using an 
FDR of 0.01 and an evalue of 10 (Kharchenko et al., 2008). And 
count the number of peaks called when using the 
sharp- and broad-binding option. 

getPeakCallingScores
}
\examples{
print("Example Code")
## This command is time intensive to run
##To run the example code the user must provide 2 bam files: 
##one for ChIP and one for the input". Here we used ChIP-seq 
##data from ENCODE. Two example files can be downloaded as follows
## get bam file
setwd(tempdir())

\dontrun{
##chip data
system("wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BLL.bam")
chipName="ENCFF000BLL"
chip.data=readBamFile(chipName)

##input data
system("wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BKA.bam")
inputName="ENCFF000BKA"
input.data=readBamFile(inputName)

## calculate binding characteristics 
chip_binding.characteristics<-spp::get.binding.characteristics(chip.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

## calculate binding characteristics 
input_binding.characteristics<-spp::get.binding.characteristics(input.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

##get chromosome information and order chip and input by it
chrl_final=intersect(names(chip.data$tags),names(input.data$tags))
chip.data$tags=chip.datatags[chrl_final]
chip.data$quality=chip.data$quality[chrl_final]
input.data$tags=input.data$tags[chrl_final]
input.data$quality=input.data$quality[chrl_final]

##remove sigular positions with extremely high tag counts with 
##respect to the neighbourhood
selectedTags=removeLocalTagAnomalies(chip.data, input.data, 
chip_binding.characteristics, input_binding.characteristics)
input.dataSelected=selectedTags$input.dataSelected
chip.dataSelected=selectedTags$chip.dataSelected

##Finally run function
bindingScores=getPeakCallingScores(chip=chip.data, 
input=input.data, chip.dataSelected=chip.dataSelected, 
input.dataSelected=input.dataSelected, 
tag.shift=82)
}
}
