% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LM_functions.R
\name{qualityScores_LM}
\alias{qualityScores_LM}
\title{Wrapper function that plots non-scaled profiles for 
TSS or TES and to collects the QC-metrics}
\usage{
qualityScores_LM(data, tag, savePlotPath = NULL, debug = FALSE)
}
\arguments{
\item{data}{metagene-list for input and chip sample for
TSS or TES returned by createMetageneProfile()}

\item{tag}{String that can be 'TSS' or 'TES',indicating if the TSS or 
the TES profile should be calcualted (Default='TSS')}

\item{savePlotPath}{if set the plot will be saved under 
'savePlotPath'. Default=NULL and plot will be forwarded to stdout.}

\item{debug}{Boolean to enter in debugging mode (default= FALSE)}
}
\value{
result Dataframe with QC-values for chip, input and 
normalized metagene profile
}
\description{
The non-scaled profile is constructed around the TSS/TES,
with 2KB up- and downstream regions respectively. Different values 
are taken at the TSS/TES and surroundings with +/-2KB, +/-1KB 
and +/-500 sizes. For all the genomic 
positions, we kept the values for the ChIP and the normalized profile,
as the normalization already contains information from the input. 
Additionally, we calculated for all of the intervals between 
the predefined positions the area under the profile, 
the local maxima (x, y coordinates), the variance, 
the standard deviation and the quantiles at 0%, 25%, 
50% and 75%. In total the function returns 43 QC-metrics.

qualityScores_LM
}
\examples{
message('Example Code')
## This command is time intensive to run
##To run the example code the user must provide 2 bam files: 
##one for ChIP and one for the input'. Here we used ChIP-seq 
##data from ENCODE. Two example files can be downloaded as follows
## get bam file
setwd(tempdir())

\dontrun{
##chip data
system('wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BLL.bam')
chipName='ENCFF000BLL'
chip.data=readBamFile(chipName)

##input data
system('wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BKA.bam')
inputName='ENCFF000BKA'
input.data=readBamFile(inputName)

## calculate binding characteristics 
chip_binding.characteristics<-spp::get.binding.characteristics(chip.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

## calculate binding characteristics 
input_binding.characteristics<-spp::get.binding.characteristics(input.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

##get chromosome information and order chip and input by it
chrl_final=intersect(names(chip.data$tags),names(input.data$tags))
chip.data$tags=chip.datatags[chrl_final]
chip.data$quality=chip.data$quality[chrl_final]
input.data$tags=input.data$tags[chrl_final]
input.data$quality=input.data$quality[chrl_final]

##remove sigular positions with extremely high tag counts with 
##respect to the neighbourhood
selectedTags=removeLocalTagAnomalies(chip.data, input.data, 
chip_binding.characteristics, input_binding.characteristics)
input.dataSelected=selectedTags$input.dataSelected
chip.dataSelected=selectedTags$chip.dataSelected

##get smoothed tagdensity 
smoothedChip=tagDensity(chip.dataSelected, 
tag.shift=82)
smoothedInput=tagDensity(input.dataSelected, 
tag.shift=82)

Meta_Result=createMetageneProfile(smoothed.densityChip=smoothedChip, 
smoothedInput,tag.shift=82)

TSS_Scores=qualityScores_LM(data=Meta_Result$TSS, tag='TSS',
savePlotPath=getwd())
}
}
