% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GlobalFunctions.R
\name{removeLocalTagAnomalies}
\alias{removeLocalTagAnomalies}
\title{Removes loval anomalies}
\usage{
removeLocalTagAnomalies(chip, input, chip_b.characteristics,
  input_b.characteristics)
}
\arguments{
\item{chip, }{data-structure with tag information for the 
ChIP (see readBamFile())}

\item{input, }{data-structure with tag information for the 
Input (see readBamFile())}

\item{chip_b.characteristics}{binding.characteristics of the ChIP. 
Is a data-structure containing binding information for binding preak
separation distance and cross-correlation profile 
(see spp::get.binding.characteristics)}

\item{input_b.characteristics, }{binding.characteristics of the Input. 
Is a data-structure containing binding information for binding preak
separation distance and cross-correlation profile 
(see spp::get.binding.characteristics)}
}
\value{
result A list containing filtered data structure for ChIP and Input
}
\description{
The removeLocalTagAnomalies function removes tags from regions 
with extremely high tag counts compared to the
neighbourhood.
'
removeLocalTagAnomalies
}
\examples{
print("Example Code")
## This command is time intensive to run
##To run the example code the user must provide 2 bam files: 
##one for ChIP and one for the input". Here we used ChIP-seq 
##data from ENCODE. The files files can be downloaded as follows
## get bam file
setwd(tempdir())

\dontrun{
##chip data
system("wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BLL.bam")
chipName="ENCFF000BLL"
chip.data=readBamFile(chipName)

##input data
system("wget 
https://www.encodeproject.org/files/ENCFF000BLL/@download/ENCFF000BKA.bam")
inputName="ENCFF000BKA"
input.data=readBamFile(inputName)

## calculate binding characteristics 
chip_binding.characteristics<-spp::get.binding.characteristics(chip.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

## calculate binding characteristics 
input_binding.characteristics<-spp::get.binding.characteristics(input.data, 
srange=c(0,500), bin=5,accept.all.tags=TRUE)

##get chromosome information and order chip and input by it
chrl_final=intersect(names(chip.data$tags),names(input.data$tags))
chip.data$tags=chip.datatags[chrl_final]
chip.data$quality=chip.data$quality[chrl_final]
input.data$tags=input.data$tags[chrl_final]
input.data$quality=input.data$quality[chrl_final]

##remove sigular positions with extremely high tag counts with 
##respect to the neighbourhood
selectedTags=removeLocalTagAnomalies(chip=chip.data, input=input.data, 
chip_b.characteristics=chip_binding.characteristics, 
input_b.characteristics=input_binding.characteristics)
}
}
