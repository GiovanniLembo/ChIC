% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GlobalFunctions.R
\name{removeLocalTagAnomalies}
\alias{removeLocalTagAnomalies}
\title{Removes loval anomalies}
\usage{
removeLocalTagAnomalies(chip, input, chip_b.characteristics,
  input_b.characteristics)
}
\arguments{
\item{chip, }{data-structure with tag information for the 
ChIP (see readBamFile())}

\item{input, }{data-structure with tag information for the 
Input (see readBamFile())}

\item{chip_b.characteristics}{binding.characteristics of the ChIP. 
Is a data-structure containing binding information for binding preak
separation distance and cross-correlation profile 
(see spp::get.binding.characteristics)}

\item{input_b.characteristics, }{binding.characteristics of the Input. 
Is a data-structure containing binding information for binding preak
separation distance and cross-correlation profile 
(see spp::get.binding.characteristics)}
}
\value{
result A list containing filtered data structure for ChIP and Input
}
\description{
The removeLocalTagAnomalies function removes tags from regions 
with extremely high tag counts compared to the
neighbourhood.

removeLocalTagAnomalies
}
\examples{

## This command is time intensive to run
##
## To run the example code the user must provide two bam files, 
## (one for the ChIP and one for the input) and read them 
## using readBamFile() function. To make it easier for the user 
## to run the example code we provide two bam files 
## (chip and input) in our ChIC.data package that have 
## already been loaded with the readBamFile() function. 
mc=4
\dontrun{

filepath=tempdir()
setwd(filepath)

##load the data
data("chipBam", package = "ChIC.data", envir = environment())
data("inputBam", package = "ChIC.data", envir = environment())

## calculate binding characteristics 

chip_binding.characteristics<-spp::get.binding.characteristics(
chipBam, srange=c(0,500), bin=5,accept.all.tags=TRUE)

input_binding.characteristics<-spp::get.binding.characteristics(
inputBam, srange=c(0,500), bin=5,accept.all.tags=TRUE)

##get chromosome information and order chip and input by it
chrl_final=intersect(names(chipBam$tags),names(inputBam$tags))
chipBam$tags=chipBam$tags[chrl_final]
chipBam$quality=chipBam$quality[chrl_final]
inputBam$tags=inputBam$tags[chrl_final]
inputBam$quality=inputBam$quality[chrl_final]

##remove sigular positions with extremely high read counts with 
##respect to the neighbourhood
selectedTags=removeLocalTagAnomalies(chipBam, inputBam, 
chip_binding.characteristics, input_binding.characteristics)
}
}
